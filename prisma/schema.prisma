generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                  String          @id @default(cuid())
    name                String
    email               String          @unique
    avatar              String
    salt                String          @unique

    litGamesCreated     LitGame[]       @relation("LitGameCreatedBy")
    litPlayers          LitPlayer[]     @relation("LitProfile")
}

enum LitGameStatus {
    NOT_STARTED
    PLAYERS_READY
    TEAMS_CREATED
    IN_PROGRESS
    COMPLETED
}

enum LitMoveType {
    ASK
    DECLINED
    GIVEN
    TURN
    CALL
    CALL_SUCCESS
    CALL_FAIL
}

model LitTeam {
    id          String          @id @default(cuid())
    name        String
    players     LitPlayer[]     @relation("LitTeamPartOf")
    score       Int             @default(0)

    // Not going to use below fields but required for prisma
    game        LitGame         @relation("TeamOfLitGame", fields:[gameId], references:[id])
    gameId      String
}

model LitPlayer {
    id              String          @id @default(cuid())
    name            String
    hand            String[]
    avatar          String

    game            LitGame         @relation("LitGamePartOf", fields:[gameId], references:[id])
    gameId          String

    user            User            @relation("LitProfile", fields:[userId], references:[id])
    userId          String

    team            LitTeam?        @relation("LitTeamPartOf", fields:[teamId], references:[id])
    teamId          String?

    turnMoves       LitMove[]       @relation("LitTurnPlayer")
    askedFromMoves  LitMove[]       @relation("LitAskedFrom")
    askedByMoves    LitMove[]       @relation("LitAskedBy")
}

model LitMove {
    id                String          @id @default(cuid())
    type              LitMoveType
    askedFor          String?
    callingSet        String?

    turn              LitPlayer?      @relation("LitTurnPlayer", fields:[turnId], references:[id])
    turnId            String?

    askedFrom         LitPlayer?      @relation("LitAskedFrom", fields:[askedFromId], references:[id])
    askedFromId       String?

    askedBy           LitPlayer?      @relation("LitAskedBy", fields:[askedById], references:[id])
    askedById         String?

    game              LitGame         @relation("LitGameMoves", fields:[gameId], references:[id])
    gameId            String

    createdAt         DateTime        @default(now())
}

model LitGame {
    id            String          @id @default(cuid())
    code          String          @unique
    status        LitGameStatus   @default(NOT_STARTED)
    playerCount   Int             @default(2)

    createdBy     User            @relation("LitGameCreatedBy", fields:[createdById], references:[id])
    createdById   String

    players       LitPlayer[]     @relation("LitGamePartOf")
    teams         LitTeam[]       @relation("TeamOfLitGame")

    moves         LitMove[]       @relation("LitGameMoves")
}