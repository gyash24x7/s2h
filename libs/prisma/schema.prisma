generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
    id                      String      @id @default(cuid())
    userId                  String
    type                    String
    provider                String
    providerAccountId       String
    refresh_token           String?     @db.Text
    access_token            String?     @db.Text
    expires_at              Int?
    token_type              String?
    scope                   String?
    id_token                String?     @db.Text
    session_state           String?
    oauth_token_secret      String?
    oauth_token             String?
    user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id              String      @id @default(cuid())
    sessionToken    String      @unique
    userId          String
    expires         DateTime
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String          @id @default(cuid())
    name            String?
    email           String?         @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]

    aliases         LitPlayer[]     @relation("LitPlayerAliases")
}

model VerificationToken {
    identifier      String
    token           String      @unique
    expires         DateTime

    @@unique([identifier, token])
}

enum LitGameStatus {
    NOT_STARTED
    PLAYERS_READY
    TEAMS_CREATED
    IN_PROGRESS
    COMPLETED
}

enum LitMoveType {
    ASK
    DECLINED
    GIVEN
    TURN
    CALL
    CALL_SUCCESS
    CALL_FAIL
}

model LitTeam {
    id          String          @id @default(cuid())
    name        String
    players     LitPlayer[]     @relation("TeamPartOf")
    score       Int             @default(0)

    // Not going to use below fields but required for prisma
    game        LitGame         @relation("TeamOfGame", fields:[gameId], references:[id])
    gameId      String
}

model LitPlayer {
    id              String          @id @default(cuid())
    name            String
    hand            String[]
    avatar          String

    user            User            @relation("LitPlayerAliases", fields:[userId], references:[id])
    userId          String

    team            LitTeam?        @relation("TeamPartOf", fields:[teamId], references:[id])
    teamId          String?

    turnMoves       LitMove[]       @relation("TurnPlayer")
    askedFromMoves  LitMove[]       @relation("AskedFrom")
    askedByMoves    LitMove[]       @relation("AskedBy")
    gamesPartOf     LitGame[]       @relation("GamesPartOf")
}

model LitMove {
    id                String          @id @default(cuid())
    type              LitMoveType
    askedFor          String?

    turn              LitPlayer?      @relation("TurnPlayer", fields:[turnId], references:[id])
    turnId            String?

    askedFrom         LitPlayer?      @relation("AskedFrom", fields:[askedFromId], references:[id])
    askedFromId       String?

    askedBy           LitPlayer?      @relation("AskedBy", fields:[askedById], references:[id])
    askedById         String?

    game              LitGame         @relation("GameMoves", fields:[gameId], references:[id])
    gameId            String
}

model LitGame {
    id            String          @id @default(cuid())
    code          String          @unique
    status        LitGameStatus   @default(NOT_STARTED)
    playerCount   Int             @default(2)

    players       LitPlayer[]     @relation("GamesPartOf")
    teams         LitTeam[]       @relation("TeamOfGame")

    moves         LitMove[]       @relation("GameMoves")
}